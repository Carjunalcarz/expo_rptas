import {
  Client,
  Account,
  ID,
  Databases,
  OAuthProvider,
  Avatars,
  Query,
  Storage,
  Permission,
  Role,
} from "react-native-appwrite";
import * as Linking from "expo-linking";
import { openAuthSessionAsync } from "expo-web-browser";
import * as FileSystem from 'expo-file-system';
import { getPendingAssessments, markAssessmentSynced } from "./local-db";

export async function getAssessments({ query = '' }: { query?: string } = {}) {
  if (!config.databaseId || !config.assessmentsCollectionId) return [];
  
  try {
    const queries = [
      Query.orderDesc('$createdAt'),
      ...(query
        ? [Query.search('building_location.street', query)]
        : [])
    ];

    const response = await databases.listDocuments(
      config.databaseId,
      config.assessmentsCollectionId,
      queries
    );

    return response.documents;
  } catch (e) {
    console.error('Failed to fetch assessments:', e);
    return [];
  }
}

export const config = {
  platform: "com.pgan.expo_rptas",
  endpoint: process.env.EXPO_PUBLIC_APPWRITE_ENDPOINT,
  publicEndpoint: process.env.EXPO_PUBLIC_APPWRITE_PUBLIC_ENDPOINT,
  projectId: process.env.EXPO_PUBLIC_APPWRITE_PROJECT_ID,
  databaseId: process.env.EXPO_PUBLIC_APPWRITE_DATABASE_ID,
  galleriesCollectionId: process.env.EXPO_PUBLIC_APPWRITE_GALLERIES_COLLECTION_ID,
  reviewsCollectionId: process.env.EXPO_PUBLIC_APPWRITE_REVIEWS_COLLECTION_ID,
  agentsCollectionId: process.env.EXPO_PUBLIC_APPWRITE_AGENTS_COLLECTION_ID,
  propertiesCollectionId: process.env.EXPO_PUBLIC_APPWRITE_PROPERTIES_COLLECTION_ID,
  bucketId: process.env.EXPO_PUBLIC_APPWRITE_BUCKET_ID,
  assessmentsCollectionId: process.env.EXPO_PUBLIC_APPWRITE_ASSESSMENTS_COLLECTION_ID,
  strictRemoteMedia: String(process.env.EXPO_PUBLIC_STRICT_REMOTE_MEDIA || '').toLowerCase() === 'true',
};

export const client = new Client();

// Initialize client when core fields are present
const isConfigured = Boolean(
  config.endpoint &&
  config.projectId &&
  config.platform &&
  config.bucketId
);

try {
  if (isConfigured) {
    client
      .setEndpoint(String(config.endpoint))
      .setProject(String(config.projectId))
      .setPlatform(String(config.platform));
  } else {
    console.warn(
      "Appwrite config missing (EXPO_PUBLIC_* env). Skipping Appwrite initialization; features will return empty results."
    );
  }
} catch (e) {
  console.warn("Appwrite initialization failed; continuing in offline mode", e);
}

export const avatar = new Avatars(client);
export const account = new Account(client);
export const databases = new Databases(client);
export const storage = new Storage(client);
